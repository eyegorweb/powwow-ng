"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

type AccessPoint {
  id: ID!
  commercialStatus: String
}

type BankAccount {
  name: String
  number: String
  establishmentCode: String
}

input BooleanFilterInput {
  eq: Boolean
}

type Country implements Node {
  id: ID!
  code: String
}

input CountryFilterInput {
  code: StringFilterInput
}

type CountryResponse {
  total: Int!
  countries: [Country]
}

input CountrySorting {
  id: SortDirection
  code: SortDirection
}

type CustomerAccount implements Node {
  id: ID!
  code: String
  name: String
  siret: String
  marketLine: String
  siren: String
  party: Party
  bankAccount: BankAccount
}

input CustomerAccountFilterInput {
  code: StringFilterInput
  name: StringFilterInput
  siret: StringFilterInput
  marketLine: StringFilterInput
  siren: StringFilterInput
  partyId: IdFilterInput
}

type CustomerAccountResponse {
  total: Int!
  items: [CustomerAccount]
}

input CustomerAccountSorting {
  id: SortDirection
  name: SortDirection
}

"""Enum du carat�re obligatoire d'un champs Custom"""
enum CustomFieldMandatoryEnum {
  PAIRING
  ORDER
  ACTIVATION
  NONE
}

"""Enum de type de champs Custom"""
enum CustomFieldTypeEnum {
  TEXT
  LIST
  DATE
}

"""Define here custom scalars"""
scalar Date

input DatesRange {
  startDate: Date
  endDate: Date
}

scalar DateTime

input DateTimeFilterInput {
  eq: DateTime
  ne: DateTime
  gt: DateTime
  lt: DateTime
  goe: DateTime
  loe: DateTime
  between: DatesRange
}

input EnumFilterInput {
  eq: OrderStatusEnum
  ne: OrderStatusEnum
  in: [OrderStatusEnum!]
}

input IdFilterInput {
  eq: ID
  ne: ID
  in: [ID!]
}

input IntegerFilterInput {
  eq: Int
  ne: Int
  gt: Int
  lt: Int
  goe: Int
  loe: Int
  in: [Int!]
}

"""Long type"""
scalar Long

type Mutation {
  updateSIMCard(input: SIMCardInstanceInput!): SIMCardInstance!
}

type Name {
  title: Title
  firstName: String
  lastName: String
}

interface Node {
  id: ID!
}

type Order implements Node {
  id: ID!
  creationDate: Date!
  orderDate: DateTime!
  party: Party
  deliveryNum: Int
  preActivationAsked: Boolean
  activationAsked: Boolean
  status: OrderStatusEnum
  Name: Name
  externalId: String
  orderItems: [OrderItem]
  customerAccount: CustomerAccount
}

type OrderedProduct {
  description: String
  code: String
  buyingPriceInEuroCentHT: Int
  recurringPriceInEuroCentHT: Int
  buyingPriceInEuroCentTTC: Int
  recurringPriceInEuroCentTTC: Int
  groupCode: String
  groupName: String
}

input OrderFilterInput {
  zipCode: StringFilterInput
  country: StringFilterInput
  city: StringFilterInput
  orderDate: DateTimeFilterInput
  status: EnumFilterInput

  """external id"""
  OrderReference: StringFilterInput
  preactivationAsked: BooleanFilterInput
  activationAsked: BooleanFilterInput
  customField1: StringFilterInput
  customField2: StringFilterInput
  customField3: StringFilterInput
  customField4: StringFilterInput
  customField5: StringFilterInput
  customField6: StringFilterInput
  partyId: IdFilterInput
  customerAccountId: IdFilterInput
  quantity: IntegerFilterInput

  """Auditable.creator"""
  creator: IdFilterInput
  workflowCode: StringFilterInput
}

type OrderIndicators {
  ordersToBeConfirmed: Int
  ordersInProgress: Int
  ordersNotConfirmed: Int
  ordersFailed: Int
  averageProcessingTime: Int
  orderToBeConfirmedByBO: Int
}

type OrderItem {
  quantity: Int
  orderedProduct: OrderedProduct
}

input OrderSorting {
  id: SortDirection
  creationDate: SortDirection
  orderDate: SortDirection
  partyName: SortDirection
  deliveryNum: SortDirection
  preActivationAsked: SortDirection
  activationAsked: SortDirection
  status: SortDirection
}

type OrdersResponse {
  total: Int!
  items: [Order]
}

enum OrderStatusEnum {
  NOT_VALIDATED
  VALIDATED
  TO_BE_CONFIRMED
  TO_BE_CONFIRMED_BY_BO
  CONFIRMATION_IN_PROGRESS
  CONFIRMED
  FAILED
  TERMINATED
  CANCELED
}

input Pagination {
  """Nombre maximum d'�l�ments � rechercher"""
  limit: Int

  """Index de page calcul� en fonction de l'argument limite. D�marre � 0"""
  page: Int
}

"""Entit� Partenaire"""
type Party implements Node {
  id: ID!

  """Nom"""
  name: String!

  """Code"""
  code: String!

  """Num�ro de SIREN"""
  siren: String

  """Code NAF"""
  naf: String

  """Champs Custom1 : Type de champs (Texte, Liste ou Date)"""
  custom1FieldType: CustomFieldTypeEnum!

  """
  Champs Custom1 : Obligatoire dans un contexte particulier ? (Commande, Activation, ...)
  """
  custom1FieldMandatory: CustomFieldMandatoryEnum!

  """
  Champs Custom1 : Liste des valeurs disponibles dans le cas d'un champs de type Liste
  """
  custom1ValidatedValuesAsList: [String!]

  """Champs Custom2 : Type de champs (Texte, Liste ou Date)"""
  custom2FieldType: CustomFieldTypeEnum!

  """
  Champs Custom2 : Obligatoire dans un contexte particulier ? (Commande, Activation, ...)
  """
  custom2FieldMandatory: CustomFieldMandatoryEnum!

  """
  Champs Custom2 : Liste des valeurs disponibles dans le cas d'un champs de type Liste
  """
  custom2ValidatedValuesAsList: [String!]

  """Champs Custom3 : Type de champs (Texte, Liste ou Date)"""
  custom3FieldType: CustomFieldTypeEnum!

  """
  Champs Custom3 : Obligatoire dans un contexte particulier ? (Commande, Activation, ...)
  """
  custom3FieldMandatory: CustomFieldMandatoryEnum!

  """
  Champs Custom3 : Liste des valeurs disponibles dans le cas d'un champs de type Liste
  """
  custom3ValidatedValuesAsList: [String!]

  """Champs Custom4 : Type de champs (Texte, Liste ou Date)"""
  custom4FieldType: CustomFieldTypeEnum!

  """
  Champs Custom4 : Obligatoire dans un contexte particulier ? (Commande, Activation, ...)
  """
  custom4FieldMandatory: CustomFieldMandatoryEnum!

  """
  Champs Custom4 : Liste des valeurs disponibles dans le cas d'un champs de type Liste
  """
  custom4ValidatedValuesAsList: [String!]

  """Champs Custom5 : Type de champs (Texte, Liste ou Date)"""
  custom5FieldType: CustomFieldTypeEnum!

  """
  Champs Custom5 : Obligatoire dans un contexte particulier ? (Commande, Activation, ...)
  """
  custom5FieldMandatory: CustomFieldMandatoryEnum!

  """
  Champs Custom5 : Liste des valeurs disponibles dans le cas d'un champs de type Liste
  """
  custom5ValidatedValuesAsList: [String!]

  """Champs Custom6 : Type de champs (Texte, Liste ou Date)"""
  custom6FieldType: CustomFieldTypeEnum!

  """
  Champs Custom6 : Obligatoire dans un contexte particulier ? (Commande, Activation, ...)
  """
  custom6FieldMandatory: CustomFieldMandatoryEnum!

  """
  Champs Custom6 : Liste des valeurs disponibles dans le cas d'un champs de type Liste
  """
  custom6ValidatedValuesAsList: [String!]
}

"""Crit�res de recherche de commandes"""
input PartyFilterInput {
  name: StringFilterInput
  id: IdFilterInput
}

"""
Liste des champs disponibles pour le tri lors d'une recherche de commandes
"""
input PartySorting {
  id: SortDirection
  name: SortDirection
}

"""Objet de retour d'une recherche de commande"""
type PartysResponse {
  total: Int!
  items: [Party!]
}

type Query {
  countries(filter: CountryFilterInput, pagination: Pagination, sorting: CountrySorting): CountryResponse
  customerAccounts(filter: CustomerAccountFilterInput, pagination: Pagination, sorting: CustomerAccountSorting): CustomerAccountResponse
  orders(filter: OrderFilterInput, pagination: Pagination, sorting: OrderSorting): OrdersResponse
  orderStatus: [OrderStatusEnum]
  findLatestSimcardsOrder(pagination: Pagination, sorting: SIMCardSorting, partyId: ID!): SIMCardResponse
  ordersIndicators: OrderIndicators
  party(id: Int!): Party
  partys(filter: PartyFilterInput, pagination: Pagination, sorting: PartySorting): PartysResponse
  findAllSimcards(limit: Int, page: Int): [SIMCardInstance]!
  findSimcardById(id: Int!): SIMCardInstance
  countSimcards: Long!
  users(filter: UserFilterInput, pagination: Pagination, sorting: UserSorting): UserResponse
  getCurrentUser: User!
  workflows(filter: WorkflowFilterInput, sorting: WorkflowSorting): WorkflowResponse
}

type SIMCard implements Node {
  id: ID!
  gencode: String
  name: String
  label: String
  type: String
  help: String
}

type SIMCardInstance {
  id: ID!
  iccid: String!
  type: String
  accessPoint: AccessPoint
}

input SIMCardInstanceInput {
  id: ID!
  iccid: String!
}

type SIMCardResponse {
  total: Int!
  items: [SIMCartOrderDTO]!
}

input SIMCardSorting {
  orderDate: SortDirection
}

type SIMCartOrderDTO {
  orderDate: Date
  simCard: SIMCard
}

enum SortDirection {
  ASC
  DESC
}

input StringFilterInput {
  eq: String
  ne: String
  in: [String!]
  startsWith: String
  endsWith: String
  contains: String
}

enum Title {
  MR
  MISS
  MRS
}

type User implements Node {
  id: ID!
  name: Name
  email: String
  username: String
  isUserParty: Boolean
  isBackOffice: Boolean
}

input UserFilterInput {
  partyId: IdFilterInput
  fullname: StringFilterInput
  username: StringFilterInput
  email: StringFilterInput
}

"""Msg pour le front: This might change back soon to User"""
type UserParty implements Node {
  id: ID!
  name: Name
  email: String
  username: String
  party: Party
  isUserParty: Boolean
  isBackOffice: Boolean
}

type UserResponse {
  total: Int!
  items: [UserParty]
}

input UserSorting {
  id: SortDirection
  username: SortDirection
  fullname: SortDirection
  email: SortDirection
}

type Workflow {
  code: String!
  workflowDescription: String
}

input WorkflowFilterInput {
  partyId: IdFilterInput
}

type WorkflowResponse {
  total: Int!
  items: [Workflow]
}

input WorkflowSorting {
  id: SortDirection
}
