scalar JSON
scalar Date

#common
interface Response {
  total: Int!
}

input Pagination {
  limit: Int
  page: Int
}

input Sorting {
  sort: SortDirection = DESCENDING
  sortBy: String = id #check if "id" doens't rise error
}

enum SortDirection {
  ASC
  DESC
}

enum criteriaOperation {
  eq #equals
  lt #lesser than
  gt #greater than
  in #in an array
  bt #between (range)
}

input SearchCriteria {
  key: String! #TODO  this have to be typed, example OrderFilters (enum)
  operation: criteriaOperation
  value: String
  direction: SortDirection
}

#availableFilters
type AvailableFilter {
  name: String!
  title: String!
  type: String!
  values: [Choice]
}

type Choice {
  code: String!
  label: String!
}

# getCurrentUser
type User {
  name: Name
  email: String
  isUserParty: Boolean
  partyName: String
  isBackOffice: Boolean
}

type Name {
  title: Title
  firstName: String
  lastName: String
}

enum Title {
  MR
  MISS
  MRS
}

#orderStatuses

type Statuses {
  id: Int
  label: String
  checked: Boolean
}

#indicators

type GetSimIndicators {
  ordersToValidate: Int
  ordersInProgress: Int
  nonConfirmedOrders: Int
  faillingOrders: Int
  ordersToBeValidated: Int
}

#orders

type OrderedProduct {
  description: String
}

type Partner {
  id: Int!
  name: String!
  code: String!
  siren: String
  naf: String
}

type Order {
  id: ID!
  name: String
  creationDate: String!
  orderDate: String!
  party: Partner
  deliveryNum: Int
  activationAsked: Boolean
  status: String
  quantity: Int
  singleProduct: OrderedProduct
}

type OrdersResponse {
  total: Int!
  orders: [Order]
}

input OrderSorting {
  id: SortDirection
  creationDate: SortDirection
  orderDate: SortDirection
  partyName: SortDirection
  deliveryNum: SortDirection
  activationAsked: SortDirection
}
enum StringCriterionOperation {
  EQUALS
  CONTAINS
  STARTS_WITH
  ENDS_WITH
}

input StringCriterion {
  operation: StringCriterionOperation
  value: String
}

enum DateCriterionOperation {
  EQUALS
  GREATER_THAN
  LESS_THAN
  BETWEEN
}

input DateCriterion {
  operation: DateCriterionOperation
  value: Date
  value1: Date
}

input OrderCriteria {
  partyName: StringCriterion
  orderDate: DateCriterion
}

type Query {
  getCurrentUser: User
  orderStatuses: [Statuses]
  indicators: GetSimIndicators
  orders(filter: OrderCriteria, pagination: Pagination, sorting: OrderSorting): OrdersResponse
}
